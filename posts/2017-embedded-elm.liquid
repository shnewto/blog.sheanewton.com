extends: default.liquid

title: Embedded Elm
draft: false
date: 12 Dec 2017 11:17:00 +0000
calendardate: December 12, 2017
path: 2017/embedded-elm
---

<p>
I've been interested in dipping my toes into the Elm language for some time
and also, curious about whether it was possible / reasonable to integrate
something I wrote in Elm into the Cobaly tooling used to generate this blog.
<br><br>
Integration was trivial so major points to Cobalt. After generating the 
JavaScript (<i>elm-make Bob.elm --output=embedded-elm.js</i>), I was
able to use raw HTML in this post's <i>.liquid</i> file to embed that
script like any other <i>.js</i> file... Or almost. This post's window into Elm
is accomplished as follows:

<pre>
<code>&lt;head&gt;
    &lt;script src="/assets/2017/embedded-elm.js"&gt;&lt;/script&gt;
	&lt;script&gt;
		var node = document.getElementById('elm');
		var app = Elm.Bob.embed(node);
	&lt;/script&gt;
&lt;/head&gt;
</code>
</pre>

<br><br>
Learning enough Elm to make something happen was the difficulty. I love
language learning tooling like <a href="http://exercism.io">exercism.io</a> so I started there.
Dusting off the functional programming brain was much less painful using their
examples and I'm a total sucker for getting tests to pass.
<br><br>
Next was asking for help, something I'm trying to get better at. While the 
comiler and documentation is really helpful, sometimes I have to admit that
learning from someone who's been through some of it is really invaluable. The
freeCodeCamp mantra 
[Read, Search, (Donâ€™t Be Afraid to) Ask](https://medium.freecodecamp.org/read-search-dont-be-afraid-to-ask-743a23c411b4)
has influeced me in that.
I did find some guidance from <a href="https://twitter.com/CrockAgile">@CrockAgile</a>,
a friend who had been through some of the learning process. He helped me a ton in 
sorting out the requirements of implementing standalone Elm beyond what I was 
albe to glean from toy the first couple <a href="http://exercism.io">exercism.io</a>
exercises. Things like the following code block that I'm likely to revisit for 
every Elm application I write.

<pre>
<code>type Msg
    = NewInput String
    | Said


type alias Model =
    ( String, String )


main : Program Never Model Msg
main =
    Html.program
        { init = ( ( "", "" ), Cmd.none )
        , view = view
        , update = update
        , subscriptions = (\x -> Sub.none)
        }
</code>
</pre>

<br><br>
So here it is, an implementation of the
<a href="http://exercism.io/exercises/elm/bob/readme">Bob in Elm</a>
exercise from <a href="http://exercism.io">exercism.io</a> (source available
<a href="https://github.com/snewt/blog.sheanewton.com/blob/master/posts/Bob/Bob.elm">
here</a>).
</p>

<p>
<i>
Bob is a lackadaisical teenager. In conversation, his responses are very limited.
<br>
<li> Bob answers 'Sure.' if you ask him a question.
<br>
<li> He answers 'Whoa, chill out!' if you yell at him.
<br>
<li> He says 'Fine. Be that way!' if you address him without actually saying anything.
<br>
<li> He answers 'Whatever.' to anything else.
</i>
</p>

<div id="elm"></div>

<head>
    <script src="/assets/2017/embedded-elm.js"></script>
	<script>
		var node = document.getElementById('elm');
		var app = Elm.Bob.embed(node);
	</script>
</head>
